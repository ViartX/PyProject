# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие
# только чисел. Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
# сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и
# вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

def is_digit(string):
    if string.isdigit():
       return True
    else:
        try:
            float(string)
            return True
        except ValueError:
            return False


class NotValidNum(Exception):
    def __init__(self, txt):
        self.txt = txt


number_list = []
while True:
    inp_data = input("Введите число (stop для выхода): ")
    if inp_data == "stop":
        break
    try:
        if not is_digit(inp_data):
            raise NotValidNum("Ошибка при вводе числа")
        number = float(inp_data)
        number_list.append(number)
    except NotValidNum as err:
        print(err)
        break


print(f"Результат: {number_list}")
