# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение.
# Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание.
# Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, exact_quantity):
        self.quantity = exact_quantity

    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other):
        if (self.quantity - other.quantity) != 0:
            return Cell(abs(self.quantity - other.quantity))

    def __mul__(self, other):
        return Cell(self.quantity * other.quantity)

    def __truediv__(self, other):
        if other.quantity != 0:
            return Cell(int(self.quantity / other.quantity))

    def make_order(self, in_line):
        result = ""
        cells_left = self.quantity
        while cells_left > 0:
            if cells_left > in_line:
                for i in range(0, in_line):
                    result += "*"
                result += "\n"
                cells_left -= in_line
            else:
                for i in range(0, cells_left):
                    result += "*"
                cells_left = 0

        return result


c1 = Cell(6)
c2 = Cell(4)
c_sum = c1 + c2
c_sub = c1 - c2
c_mul = c1 * c2
c_div = c1 / c2

print(f"c1 = \n{c1.make_order(4)}")
print(f"c2 = \n{c2.make_order(4)}")
print(f"c_sum = \n{c_sum.make_order(4)}\n")
print(f"c_sub = \n{c_sub.make_order(4)}\n")
print(f"c_mul = \n{c_mul.make_order(4)}\n")
print(f"c_div = \n{c_div.make_order(4)}\n")
